#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e

BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_NAME=imagemagick
BIN_DIR=$(
  cd "$(dirname "$0")"
  pwd
) # absolute path
ROOT_DIR=$(dirname "$BIN_DIR")

function indent() {
  c='s/^/       /'
  case $(uname) in
  Darwin) sed -l "$c" ;;
  *) sed -u "$c" ;;
  esac
}

arrow() {
  sed -u 's/^/-----> /'
}

function vendor() {
  binary="$1"
  path="$2"

  echo "Fetching $binary" | indent
  mkdir -p $path
  tar -xz -f $binary -C $path

  if [ -d "$path/bin" ]; then
    export PATH=$path/bin:$PATH
  fi

  if [ -d "$path/lib/pkgconfig" ]; then
    # pkg-config should handle compiler options (if used)
    export PKG_CONFIG_PATH="$path/lib/pkgconfig:$PKG_CONFIG_PATH"
  fi

  # standard paths
  export CPPPATH="$path/include/ImageMagick-7:$CPPPATH"
  export CPATH="$path/include/ImageMagick-7:$CPATH"
  export C_INCLUDE_PATH="$path/include/ImageMagick-7:$C_INCLUDE_PATH"

  #export CPPPATH="$path/include:$CPPPATH"
  #export CPATH="$path/include:$CPATH"
  export LIBRARY_PATH="$path/lib:$LIBRARY_PATH"
  export LD_LIBRARY_PATH="$path/lib:$LD_LIBRARY_PATH"
}

IMAGE_MAGICK_VERSION="7.1.1-45"
CACHE_FILE="$CACHE_DIR/imagemagick-$IMAGE_MAGICK_VERSION.tar.gz"
VENDOR_DIR="$BUILD_DIR/vendor"
mkdir -p $VENDOR_DIR

if [ ! -f $CACHE_FILE ]; then
  INSTALL_DIR="$VENDOR_DIR/imagemagick"
  mkdir -p $INSTALL_DIR
  # install imagemagick
  IMAGE_MAGICK_FILE="ImageMagick-$IMAGE_MAGICK_VERSION.tar.xz"
  IMAGE_MAGICK_DIR="ImageMagick-$IMAGE_MAGICK_VERSION"
  # SSL cert used on imagemagick not recognized by heroku.
  IMAGE_MAGICK_URL="http://www.imagemagick.org/download/releases/$IMAGE_MAGICK_FILE"

  echo "-----> Downloading ImageMagick from $IMAGE_MAGICK_URL"
  wget $IMAGE_MAGICK_URL -P $BUILD_DIR | indent

  echo "-----> Extracting ImageMagick from $BUILD_DIR/$IMAGE_MAGICK_FILE"
  if [ ! -f $BUILD_DIR/$IMAGE_MAGICK_FILE ]; then
    echo "Error: Unable to download ImageMagick" | indent
    ls $BUILD_DIR | indent
    exit 1;
  fi
  tar xvf $BUILD_DIR/$IMAGE_MAGICK_FILE | indent

  echo "-----> Building ImageMagick"
  cd $IMAGE_MAGICK_DIR
  export CPPFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  ./configure --prefix=$INSTALL_DIR --without-gvc
  make && make install
  cd ..
  rm -rf $IMAGE_MAGICK_DIR

  # cache for future deploys
  echo "-----> Caching ImageMagick installation"
  cd $VENDOR_DIR
  REL_INSTALL_DIR="imagemagick"
  tar czf $REL_INSTALL_DIR.tar.gz $REL_INSTALL_DIR
  mv $REL_INSTALL_DIR.tar.gz $CACHE_FILE
else
  # cache exists, extract it
  echo "-----> Extracting ImageMagick $CACHE_FILE => $VENDOR_DIR"
  tar xzf $CACHE_FILE -C "$BUILD_DIR/vendor/imagemagick"
fi

echo "Vendoring binaries" | arrow

if [[ "$STACK" == "heroku-24" ]]; then
  echo "Vendoring on heroku-24"
  # vendor "${ROOT_DIR}/build/imagemagick-heroku-24.tar.gz" "$BUILD_DIR/vendor/imagemagick"
  vendor $CACHE_FILE "$BUILD_DIR/vendor/imagemagick"
elif [[ "$STACK" == "heroku-22" ]]; then
  echo "Vendoring on heroku-22"
  vendor "${ROOT_DIR}/build/imagemagick-heroku-22.tar.gz" "$BUILD_DIR/vendor/imagemagick"
elif [[ "$STACK" == "heroku-20" ]]; then
  echo "Vendoring on heroku-20"
  vendor "${ROOT_DIR}/build/imagemagick-heroku-20.tar.gz" "$BUILD_DIR/vendor/imagemagick"
else
  echo "Unsupported stack: $STACK"
  exit 1
fi

ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick"
echo $ACTUAL_INSTALL_PATH

echo "Configuring build environment" | arrow

cat <<EOF >export
export MAGICK_HOME="$BUILD_DIR/vendor/imagemagick"
export MAGICK_CONFIGURE_PATH="$BUILD_DIR/vendor/imagemagick"
export PATH="/app/bin:$PATH:\$PATH"
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH"
export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH"
export CPPPATH="\$CPPPATH:$CPPPATH"
export CPATH="\$CPATH:$CPATH"
export C_INCLUDE_PATH="\$C_INCLUDE_PATH:$C_INCLUDE_PATH"

EOF

export MAGICK_HOME="$BUILD_DIR/vendor/imagemagick"
export MAGICK_CONFIGURE_PATH="$BUILD_DIR/vendor/imagemagick"
export PATH="/app/bin:$PATH:\$PATH"

echo $MAGICK_HOME
echo $MAGICK_CONFIGURE_PATH
echo $PATH
echo $LD_LIBRARY_PATH
echo $LIBRARY_PATH
echo $PKG_CONFIG_PATH
echo $CPPPATH
echo $CPATH
echo $C_INCLUDE_PATH

echo "Building runtime environment" | arrow
mkdir -p $BUILD_DIR/.profile.d

cat <<EOF >$BUILD_DIR/.profile.d/$BUILDPACK_NAME.sh
export MAGICK_HOME="$ACTUAL_INSTALL_PATH"
export MAGICK_CONFIGURE_PATH="$ACTUAL_INSTALL_PATH"
export PATH="/app/bin:${PATH//$BUILD_DIR//app}:\$PATH"
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:${LD_LIBRARY_PATH//$BUILD_DIR//app}"
export LIBRARY_PATH="\$LIBRARY_PATH:${LIBRARY_PATH//$BUILD_DIR//app}"
export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:${PKG_CONFIG_PATH//$BUILD_DIR//app}"
export CPPPATH="\$CPPPATH:${CPPPATH//$BUILD_DIR//app}"
export CPATH="\$CPATH:${CPATH//$BUILD_DIR//app}"
export C_INCLUDE_PATH="\$C_INCLUDE_PATH:${C_INCLUDE_PATH//$BUILD_DIR//app}"
EOF
